# Implementation of merge sort + timing analysis (2 methods)

def merge(left_array, right_array):
    if len(left_array) == 0:
        return right_array
    if len(right_array) == 0:
        return left_array
    merged_array = []
    left_index = right_index = 0
    while len(merged_array) < len(right_array) + len(left_array):
        if left_array[left_index] <= right_array[right_index]:
            merged_array.append(left_array[left_index])
            left_index += 1
        else:
            merged_array.append(right_array[right_index])
            right_index += 1
        if left_index == len(left_array):
            merged_array += right_array[right_index:]
            break
        if right_index == len(right_array):
            merged_array += left_array[left_index:]
            break
    return merged_array


def merge_sort(array):
    if len(array) < 2:
        return array
    mid_point = len(array) // 2
    return merge(left_array=merge_sort(array[:mid_point]), right_array=merge_sort(array[mid_point:]))

assert merge_sort([3, -2, 1, -4, 0, 5]) == [-4, -2, 0, 1, 3, 5]
assert merge_sort([5, 2, 9, 1, 5, 6]) == [1, 2, 5, 5, 6, 9]


def max_subarray_bruteforce(array):
    max_sum = flaot("-inf")
    for i in range(len(array)):
        current_sum = 0
        for j in range(len(array)):
            current_sum += array[j]
            max_sum = max(max_sum, current_sum)
    return max_sum

def max_subarray_n(array):
    max_current = array[0]
    max_final = array[0]
    for i in array[1:]:
        max_loop = max_current + i
        if max_loop > max_current:
            max_current = max_loop
        else:
            max_current = i
        max_final = max(max_current, max_final)
    return max_final

def max_crossing_sum(array, low, mid, high):
    left_sum = float("-inf")
    current_left_sum = 0
    for i in range(mid, low - 1, -1):
        current_left_sum += array[i]
        if current_left_sum > left_sum:
            left_sum = current_left_sum

    right_sum = float("-inf")
    current_right_sum = 0
    for i in range(mid+1, high+1):
        current_right_sum += array[i]
        if current_right_sum > right_sum:
            right_sum = current_right_sum
    return left_sum + right_sum

def max_subarray_sum_DC(array, low, high):
    if low == high:
        return array[low]
    mid = (low + high) // 2
    left_sum = max_subarray_sum_DC(array, low, mid)
    right_sum = max_subarray_sum_DC(array, mid+1, high)
    crossing_sum = max_crossing_sum(array, low, mid, high)
    return max(left_sum, right_sum, crossing_sum)

array = [-2, 1, -3, 4, -1, 2, 1, -5, 4]
max_sum = max_subarray_sum_DC(array, 0, len(array) - 1)
print(max_sum)
