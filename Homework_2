# Implementation of merge sort + timing analysis (2 methods)

def merge(left_array, right_array):
    if len(left_array) == 0:
        return right_array
    if len(right_array) == 0:
        return left_array
    merged_array = []
    left_index = right_index = 0
    while len(merged_array) < len(right_array) + len(left_array):
        if left_array[left_index] <= right_array[right_index]:
            merged_array.append(left_array[left_index])
            left_index += 1
        else:
            merged_array.append(right_array[right_index])
            right_index += 1
        if left_index == len(left_array):
            merged_array += right_array[right_index:]
            break
        if right_index == len(right_array):
            merged_array += left_array[left_index:]
            break
    return merged_array


def merge_sort(array):
    if len(array) < 2:
        return array
    mid_point = len(array) // 2
    return merge(left_array=merge_sort(array[:mid_point]), right_array=merge_sort(array[mid_point:]))

assert merge_sort([3, -2, 1, -4, 0, 5]) == [-4, -2, 0, 1, 3, 5]
assert merge_sort([5, 2, 9, 1, 5, 6]) == [1, 2, 5, 5, 6, 9]
